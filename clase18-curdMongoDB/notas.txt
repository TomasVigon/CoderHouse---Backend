Comprender el significado de CRUD.
Aprender el lenguaje de consultas de MongoDB.
Crear y configurar cuentas de usuario, para definir roles que representarán permisos 
de acceso y operación en la base de datos

El concepto CRUD está estrechamente vinculado a la gestión de datos digitales.
Create (Crear registros)
Read ó Retrieve (Leer registros)
Update (Actualizar registros)
Delete ó Destroy (Borrar registros)

otra forma de conectarme a mongo "mongodb://127.0.0.1:27017" en consola

db --> muestra la base de datos que estoy usando actualmente
load --> carga un string de comandos

db.nombreCollection.drop() --> borra la coleccion
db.dropDatabase() --> borra la base de datos que estoy usando
db.createCollection("nombreCollection") --> me crea una coleccion vacia
db.nombreCollection.stats() --> me muestra estadisticas de esa coleccion y su metadata
db.nombreCollection.storageSize() --> muestra el tamaño de la collection
db.nombreCollection.renameCollection("nuevoNombreCollection") --> cambia nombre coleccion

db.coll.drop() : borra una colección y sus índices respectivos.
db.dropDatabase() : elimina la base de datos actual.
db.createCollection("contacts") : crea una colección en forma explícita.
db.coll.stats() : refleja estadísticas del uso de la base.
db.coll.storageSize() : tamaño de almacenamiento de la colección.
db.coll.totalIndexSize() : tamaño total de todos los índices de la colección.
db.coll.totalSize(): tamaño total en bytes de los datos de la colección más el tamaño de cada índice de la colección.
db.coll.validate({full: true}) : comprueba la integridad de una colección.
db.coll.renameCollection("new_coll", true) : renombra una colección, el  2do parámetro para borrar la colección destino si existe.

db.coll.insertOne( {key:value} ) : inserta un documento en la colección.
db.coll.insert( {key:value} ) : inserta un documento en la colección (en desuso).
db.coll.insert( [ {key:value}, {key:value}, {key:value} ] ) : inserta un array de documentos la colección ordered.
db.coll.insert( [ {key:value}, {key:value}, {key:value} ], {ordered: false} ) : inserta un array de documentos la colección unordered.
db.coll.insertMany( [ {key:value}, {key:value}, {key:value} ] ) : inserta un array de documentos la colección en modo Bulk.
db.coll.findOne() : busca un documento dentro de una colección.
db.coll.find() : busca todos los documentos dentro de una colección.
db.coll.find( {key:value} ) : busca los documentos dentro de una colección que satisfacen el filtro de búsqueda.
db.coll.find().pretty() : devuelve todos los documentos conservando el formato de objeto de salida.

db.coll.estimatedDocumentCount(): Devuelve la cantidad total de documentos encontrados en la colección.
db.coll.count(): Devuelve la cantidad de documentos
db.coll.countDocuments( {key: val} ): Devuelve la cantidad de documentos encontrados en la colección (con filtro de query).

en una parte del id se guarda la hora en que se creo
ObjectId("63460e3d33b78e26801188ed").getTimestamp().toLocaleString()

db.coll.find( {key: {$operator: val}} ) : devuelve los documentos según el operador de filtro utilizado.
$and : Realiza operación AND -> sintaxis: {$and: [ {},{} ] }
$or : Realiza operación OR -> sintaxis: {$or: [ {},{} ] }
$lt : Coincide con valores que son menores que un valor especificado.
$lte : Coincide con valores menores o iguales a un valor especificado.
$gt : Coincide con valores mayores a un valor especificado. -> db.clientes.find({"edad": {$gt: 31}})
$gte : Coincide con valores mayores o iguales a un valor especificado.
$ne : Coincide con valores que no son iguales a un valor especificado.
$eq : Selecciona los documentos que son iguales a un valor especificado.
$exists : Selecciona los documentos según la existencia de un campo.
$in : Selecciona los documentos especificados en un array. sintaxis: {key:{$in: [array of values] } }
$nin : Coincide con ninguno de los valores especificados en un array.
$size : Coincide con el número de elementos especificados.
$all : Coincide con todos los valores definidos dentro de un array.
$elemMatch : Coincide con algún valor definido dentro del query.

db.coll.distinct( val )
devuelve un array con los distintos valores que toma un determinado campo en los documentos de la colección.

db.coll.find({doc.subdoc:value})
Se utiliza para filtrar subdocumentos.

db.coll.find({name: /^Max$/i})
filtra utilizando expresiones regulares

sort( { campoA: 1 ó -1 , campoB: 1 ó -1 , ... } ) : Especifica el orden en el que la consulta devuelve documentos coincidentes. El ó los campos por los cuales ordena pueden contener los valores 1 y -1, estableciendo orden ascendente y descendente respectivamente. El orden se evalúa de izquierda a derecha en caso que los valores coincidan.
limit(num): Especifica el número máximo de documentos devueltos.
skip(offset) : Saltea la cantidad de documentos especificada.

db.collection.updateOne(query, update, options)
query: especifica el filtro de documentos a ser actualizados.
update: contiene los datos a ser actualizados con sus operadores respectivos: $set, $unset, $inc, $rename, $mul, $min, $max, etc.
options: contiene varias opciones para la actualización, entre ellas: 
upsert (true ó false) : Es una opción para hacer un insert en caso de que el registro no exista.
db.coll.updateMany(query, update, options)
Igual que el anterior, pero hace una actualización múltiple en caso de que el filtro de query devuelva varios resultados.

db.articulos.update({"_id": ObjectId("63460e3d33b78e26801188ef")}, {$set: {nombre: "PC Ggamer"}})
EN TODO CASO VER LOS EJEMPLOS DE LAS FILMINAS

db.coll.deleteOne( {key: val} ): Elimina un sólo documento (el primero) que coincide con el filtro especificado.
db.coll.deleteMany( {key: val} ): Elimina todos los documentos que coinciden con el filtro especificado.
db.coll.remove( {key: val} ): Elimina documentos de una colección.
db.coll.findOneAndDelete( filter, options ): Elimina un solo documento según el filtro y los criterios de clasificación. Algunas de las options pueden ser
- sort: para establecer orden para el filtro
- projection: para elegir campos de salida

creacion usuarios y permisos
use admin --> db utilizada
db.createUser({"user": "root", "pwd": "rootpwd", "roles": ["root"]})
db.dropUser("root")

En MongoDB es posible crear usuarios y asignarles acceso mediante roles
Usuario lector: tendrá acceso de lectura a la base de datos.
Usuario escritor: tendrá acceso de lectura y escritura a la base de datos

db.createUser({user: "lector", pwd: "123456", roles: [ {role: "read", db: "empresa"} ]})
cierro la base de datos y la abro nuevamente con el comando
mongo -u lector --> procedo a poner la contraseña

